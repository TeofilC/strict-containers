--- a/tests/seq-properties.hs
+++ b/tests/seq-properties.hs
@@ -809,16 +809,13 @@
 -- We want to ensure that
 --
 -- munzip xs = xs `seq` (fmap fst x, fmap snd x)
---
--- even in the presence of bottoms (alternatives are all balance-
--- fragile).
 prop_munzipLazy :: Seq (Integer, B) -> Bool
 prop_munzipLazy pairs = deepseq ((`seq` ()) <$> repaired) True
   where
     partialpairs = mapWithIndex (\i a -> update i err pairs) pairs
     firstPieces = fmap (fst . munzip) partialpairs
     repaired = mapWithIndex (\i s -> update i 10000 s) firstPieces
-    err = error "munzip isn't lazy enough"
+    err = (0, B 0)
 
 -- Applicative operations
 
--- a/tests/map-strictness.hs
+++ b/tests/map-strictness.hs
@@ -12,7 +12,7 @@
 
 import Data.Strict.Map.Autogen.Strict (Map)
 import qualified Data.Strict.Map.Autogen.Strict as M
-import qualified Data.Strict.Map.Autogen as L
+import qualified Data.Map.Lazy as L
 
 import Utils.IsUnit
 
