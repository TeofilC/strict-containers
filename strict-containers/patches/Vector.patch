Similar to HashMap, Vector internally uses a primitive Array# which we can't
add ! annotations to. Luckily, primitive operations are never called directly
but via instance methods of Data.Vector.Generic.{Vector,MVector} which can be
overridden. So that's what this patch does.

There remains a very small chance that future changes will break this and use
primitive operations directly; if you update Vector you should check that:

- Vector/Autogen.hs does not use newArray/writeArray[1] anywhere
- Vector/Autogen/Mutable.hs only applies newArray/writeArray[1] to an
  element-typed parameter of the parent function where the parameter has a bang
  pattern on it; except that `newArray _ uninitialised` is OK.

[1] or any other primitive operations that take an element-type input i.e. with
type ([.. ->] a -> ..), e.g. from Data.Primitive.Array or a GHC primop.

For more discussion see https://github.com/haskell/vector/issues/380

We also re-format the data definitions due to https://github.com/haskell/haddock/issues/836
vector upstream CI doesn't run haddock so they don't see this issue themselves

--- a/src/Data/Strict/Vector/Autogen.hs
+++ b/src/Data/Strict/Vector/Autogen.hs
@@ -175,8 +175,8 @@
 
 import Data.Strict.Vector.Autogen.Mutable  ( MVector(..) )
 import Data.Primitive.Array
-import qualified Data.Strict.Vector.Autogen.Fusion.Bundle as Bundle
-import qualified Data.Strict.Vector.Autogen.Generic as G
+import qualified Data.Vector.Fusion.Bundle as Bundle
+import qualified Data.Vector.Generic as G
 
 import Control.DeepSeq ( NFData(rnf)
 #if MIN_VERSION_deepseq(1,4,3)
@@ -232,9 +232,7 @@
 
 
 -- | Boxed vectors, supporting efficient slicing.
-data Vector a = Vector {-# UNPACK #-} !Int
-                       {-# UNPACK #-} !Int
-                       {-# UNPACK #-} !(Array a)
+data Vector a = Vector {-# UNPACK #-} !Int {-# UNPACK #-} !Int {-# UNPACK #-} !(Array a)
         deriving ( Typeable )
 
 liftRnfV :: (a -> ()) -> Vector a -> ()
@@ -306,6 +304,9 @@
   basicUnsafeCopy (MVector i n dst) (Vector j _ src)
     = copyArray dst i src j n
 
+  {-# INLINE elemseq #-}
+  elemseq _ = seq
+
 -- See http://trac.haskell.org/vector/ticket/12
 instance Eq a => Eq (Vector a) where
   {-# INLINE (==) #-}
--- a/src/Data/Strict/Vector/Autogen/Mutable.hs
+++ b/src/Data/Strict/Vector/Autogen/Mutable.hs
@@ -62,7 +62,7 @@
 ) where
 
 import           Control.Monad (when, liftM)
-import qualified Data.Strict.Vector.Autogen.Generic.Mutable as G
+import qualified Data.Vector.Generic.Mutable as G
 import           Data.Strict.Vector.Autogen.Internal.Check
 import           Data.Primitive.Array
 import           Control.Monad.Primitive
 
@@ -76,9 +76,7 @@
 
 
 -- | Mutable boxed vectors keyed on the monad they live in ('IO' or @'ST' s@).
-data MVector s a = MVector {-# UNPACK #-} !Int                -- ^ Offset in underlying array
-                           {-# UNPACK #-} !Int                -- ^ Size of slice
-                           {-# UNPACK #-} !(MutableArray s a) -- ^ Underlying array
+data MVector s a = MVector {-# UNPACK #-} !Int {-# UNPACK #-} !Int {-# UNPACK #-} !(MutableArray s a)
         deriving ( Typeable )
 
 type IOVector = MVector RealWorld
@@ -119,7 +117,7 @@
   basicInitialize _ = return ()
 
   {-# INLINE basicUnsafeReplicate #-}
-  basicUnsafeReplicate n x
+  basicUnsafeReplicate n !x
     = do
         arr <- newArray n x
         return (MVector 0 n arr)
@@ -128,7 +126,7 @@
   basicUnsafeRead (MVector i _ arr) j = readArray arr (i+j)
 
   {-# INLINE basicUnsafeWrite #-}
-  basicUnsafeWrite (MVector i _ arr) j x = writeArray arr (i+j) x
+  basicUnsafeWrite (MVector i _ arr) j !x = writeArray arr (i+j) x
 
   {-# INLINE basicUnsafeCopy #-}
   basicUnsafeCopy (MVector i n dst) (MVector j _ src)
