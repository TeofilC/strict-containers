We need to do a little bit extra work in this patch:

The HashMap data structure in Internal.hs uses a bunch of primitive Array# that
we can't duplicate and transform to use ! strictness annotations. Instead, we
add strictness annotations to all functions in Internal/Array.hs that insert an
element into (or replace an existing one in) an Array.

For more discussion see https://github.com/haskell-unordered-containers/unordered-containers/issues/311

--- a/src/Data/Strict/HashMap/Autogen/Internal.hs
+++ b/src/Data/Strict/HashMap/Autogen/Internal.hs
@@ -179,7 +179,7 @@ import qualified Language.Haskell.TH.Syntax  as TH
 hash :: H.Hashable a => a -> Hash
 hash = fromIntegral . H.hash
 
-data Leaf k v = L !k v
+data Leaf k v = L !k !v
   deriving (Eq)
 
 instance (NFData k, NFData v) => NFData (Leaf k v) where
--- a/src/Data/Strict/HashMap/Autogen/Internal/Array.hs
+++ b/src/Data/Strict/HashMap/Autogen/Internal/Array.hs
@@ -197,15 +197,19 @@ liftRnfArray rnf0 ary0 = go ary0 n0 0
 -- state thread, with each element containing the specified initial
 -- value.
 new :: Int -> a -> ST s (MArray s a)
-new _n@(I# n#) b =
+new n !b = new' n b
+{-# INLINE new #-}
+
+new' :: Int -> a -> ST s (MArray s a)
+new' _n@(I# n#) b =
     CHECK_GT("new",_n,(0 :: Int))
     ST $ \s ->
         case newSmallArray# n# b s of
             (# s', ary #) -> (# s', MArray ary #)
-{-# INLINE new #-}
+{-# INLINE new' #-}
 
 new_ :: Int -> ST s (MArray s a)
-new_ n = new n undefinedElem
+new_ n = new' n undefinedElem
 
 -- | When 'Exts.shrinkSmallMutableArray#' is available, the returned array is the same as the array given, as it is shrunk in place.
 -- Otherwise a copy is made.
@@ -222,7 +226,7 @@ shrink mary n = cloneM mary 0 n
 {-# INLINE shrink #-}
 
 singleton :: a -> Array a
-singleton x = runST (singletonM x)
+singleton !x = runST (singletonM x)
 {-# INLINE singleton #-}
 
 singletonM :: a -> ST s (Array a)
@@ -239,7 +243,7 @@ snoc ary x = run $ do
 {-# INLINE snoc #-}
 
 pair :: a -> a -> Array a
-pair x y = run $ do
+pair !x !y = run $ do
     ary <- new 2 x
     write ary 1 y
     return ary
@@ -252,7 +256,7 @@ read ary _i@(I# i#) = ST $ \ s ->
 {-# INLINE read #-}
 
 write :: MArray s a -> Int -> a -> ST s ()
-write ary _i@(I# i#) b = ST $ \ s ->
+write ary _i@(I# i#) !b = ST $ \ s ->
     CHECK_BOUNDS("write", lengthM ary, _i)
         case writeSmallArray# (unMArray ary) i# b s of
             s' -> (# s' , () #)
--- a/src/Data/Strict/HashMap/Autogen/Strict.hs
+++ b/src/Data/Strict/HashMap/Autogen/Strict.hs
@@ -100,16 +100,11 @@ module Data.Strict.HashMap.Autogen.Strict
     , fromList
     , fromListWith
     , fromListWithKey
-
-      -- ** HashSets
-    , HS.keysSet
     ) where
 
 import Data.Strict.HashMap.Autogen.Internal.Strict
 import Prelude                      ()
 
-import qualified Data.HashSet.Internal as HS
-
 -- $strictness
 --
 -- This module satisfies the following strictness properties:
