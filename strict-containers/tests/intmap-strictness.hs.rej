--- tests/intmap-strictness.hs
+++ tests/intmap-strictness.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE BangPatterns #-}
 {-# OPTIONS_GHC -fno-warn-orphans #-}
 
 module Main (main) where
@@ -90,7 +92,7 @@
 -- also https://github.com/haskell/containers/issues/473
 
 pFromAscListLazy :: [Int] -> Bool
-pFromAscListLazy ks = not . isBottom $ M.fromAscList elems
+pFromAscListLazy ks = not . isBottom $ L.fromAscList elems
   where
     elems = [(k, v) | k <- nubInt ks, v <- [undefined, ()]]
 
@@ -160,13 +181,16 @@
     , check "insertWith"      False $ L.insertWith const 42 () m0
     , check "fromList"        True  $ L.fromList [(42,()),(42,())]
     , check "fromListWith"    False $ L.fromListWith const [(42,()),(42,())]
+#if MIN_VERSION_containers(0,6,3)
+    -- see https://github.com/haskell/containers/issues/473
     , check "fromAscList"     True  $ L.fromAscList [(42,()),(42,())]
+#endif
     , check "fromAscListWith" False $ L.fromAscListWith const [(42,()),(42,())]
     , check "fromDistinctAscList" True $ L.fromAscList [(42,())]
     ]
   where
     m0 = L.singleton 42 ()
-    check :: TestName -> Bool -> IntMap () -> Test
+    check :: TestName -> Bool -> L.IntMap () -> Test
     check n e m = testCase n $ case L.lookup 42 m of
         Just v -> assertBool msg (e == isUnit v)
         _      -> assertString "key not found"
